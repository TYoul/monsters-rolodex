{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.components.jsx","components/card-list/card-list.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","memo","onSearchChange","placeholder","className","type","onChange","Card","monster","src","id","alt","name","email","CardList","monsters","map","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","handleSearch","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAceA,G,MAXGC,gBAAK,YAAsC,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YACxC,OACE,uBACEC,UAAU,SACVC,KAAK,SACLF,YAAaA,EACbG,SAAUJ,QCODK,G,YAbFN,gBAAK,YAAkB,IAAfO,EAAc,EAAdA,QACnB,OACE,sBAAKJ,UAAU,iBAAf,UACE,qBACEK,IAAG,+BAA0BD,EAAQE,GAAlC,0BACHC,IAAI,YAEN,6BAAKH,EAAQI,OACb,4BAAIJ,EAAQK,eCGHC,EAVEb,gBAAK,YAAmB,IAAhBc,EAAe,EAAfA,SACvB,OACE,qBAAKX,UAAU,YAAf,SACGW,EAASC,KAAI,SAAAR,GAAO,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQE,YCkCZO,G,wDArCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXH,SAAU,GACVI,YAAa,IAJH,E,gEAQO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEV,SAAUS,S,+BAGnC,IAAD,SAC2BE,KAAKR,MAA/BH,EADD,EACCA,SAAUI,EADX,EACWA,YACZQ,EAAmBZ,EAASa,QAAO,SAAApB,GAAO,OAC9CA,EAAQI,KAAKiB,cAAcC,SAASX,EAAYU,kBAElD,OACE,sBAAKzB,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACED,YAAY,kBACZD,eAAgB,SAAA6B,GAAC,OAAI,EAAKC,aAAaD,MAEzC,cAAC,EAAD,CAAUhB,SAAUY,S,mCAIbI,GACXL,KAAKD,SAAS,CACZN,YAAaY,EAAEE,OAAOC,Y,GAjCVC,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c3cdcaa6.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport './search-box.style.css';\r\n\r\nconst SearchBox = memo(({ onSearchChange, placeholder }) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={onSearchChange}\r\n    />\r\n  );\r\n});\r\n\r\nexport default SearchBox;\r\n","import React, { memo } from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = memo(({ monster }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n        alt=\"monster\"\r\n      />\r\n      <h1>{monster.name}</h1>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Card;\r\n","import React, { memo } from 'react';\r\nimport './card-list.style.css';\r\nimport Card from '../card/card.components';\r\n\r\nconst CardList = memo(({ monsters }) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\nimport SearchBox from './components/search-box/search-box.component';\nimport CardList from './components/card-list/card-list.components';\nimport './App.css';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          onSearchChange={e => this.handleSearch(e)}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n  handleSearch(e) {\n    this.setState({\n      searchField: e.target.value,\n    });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}